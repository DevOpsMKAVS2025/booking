// <auto-generated />
using System;
using System.Collections.Generic;
using Booking.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20251025142818_migration-for-accommodation")]
    partial class migrationforaccommodation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("booking")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Domain.Entities.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<int[]>("Conveniences")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<decimal>("GlobalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxGuestNumber")
                        .HasColumnType("integer");

                    b.Property<int>("MinGuestNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Photos")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Accommodations", "booking");
                });

            modelBuilder.Entity("Booking.Domain.Entities.Accommodation", b =>
                {
                    b.OwnsMany("Booking.Domain.Entities.Availability", "Availability", b1 =>
                        {
                            b1.Property<Guid>("AccommodationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.HasKey("AccommodationId", "Id");

                            b1.ToTable("Accommodation_Availability", "booking");

                            b1.WithOwner()
                                .HasForeignKey("AccommodationId");

                            b1.OwnsOne("Booking.Domain.Entities.DateRange", "Duration", b2 =>
                                {
                                    b2.Property<Guid>("AvailabilityAccommodationId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("AvailabilityId")
                                        .HasColumnType("uuid");

                                    b2.Property<DateTime>("From")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime>("To")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("AvailabilityAccommodationId", "AvailabilityId");

                                    b2.ToTable("Accommodation_Availability", "booking");

                                    b2.WithOwner()
                                        .HasForeignKey("AvailabilityAccommodationId", "AvailabilityId");
                                });

                            b1.Navigation("Duration")
                                .IsRequired();
                        });

                    b.OwnsMany("Booking.Domain.Entities.Price", "Prices", b1 =>
                        {
                            b1.Property<Guid>("AccommodationId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("PriceType")
                                .HasColumnType("integer");

                            b1.HasKey("AccommodationId", "Id");

                            b1.ToTable("Accommodation_Prices", "booking");

                            b1.WithOwner()
                                .HasForeignKey("AccommodationId");

                            b1.OwnsOne("Booking.Domain.Entities.DateRange", "Duration", b2 =>
                                {
                                    b2.Property<Guid>("PriceAccommodationId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("PriceId")
                                        .HasColumnType("uuid");

                                    b2.Property<DateTime>("From")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime>("To")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("PriceAccommodationId", "PriceId");

                                    b2.ToTable("Accommodation_Prices", "booking");

                                    b2.WithOwner()
                                        .HasForeignKey("PriceAccommodationId", "PriceId");
                                });

                            b1.Navigation("Duration")
                                .IsRequired();
                        });

                    b.Navigation("Availability");

                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
